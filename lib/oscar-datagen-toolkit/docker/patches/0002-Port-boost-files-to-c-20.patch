From 49501b4bc7dc3938b309e52c35a2ffa119d41cbf Mon Sep 17 00:00:00 2001
From: "Murillo Rojas, Luis" <luis.murillo.rojas@intel.com>
Date: Wed, 12 Apr 2023 21:39:18 +0000
Subject: [PATCH 2/4] Port boost files to c++20

---
 Util/BoostFiles/rational.hpp | 16 +++++++++-------
 Util/BoostFiles/read.hpp     | 25 ++++++++++---------------
 2 files changed, 19 insertions(+), 22 deletions(-)

diff --git a/Util/BoostFiles/rational.hpp b/Util/BoostFiles/rational.hpp
index 4bcdc894b..a45cc4f24 100644
--- a/Util/BoostFiles/rational.hpp
+++ b/Util/BoostFiles/rational.hpp
@@ -21,6 +21,7 @@
 //    Nickolay Mladenov, for the implementation of operator+=

 //  Revision History
+//  12 Nov 20  Fix operators to work with C++20 rules (Glen Joseph Fernandes)
 //  02 Sep 13  Remove unneeded forward declarations; tweak private helper
 //             function (Daryle Walker)
 //  30 Aug 13  Improve exception safety of "assign"; start modernizing I/O code
@@ -74,7 +75,6 @@
 #include <cstddef>               // for NULL
 #include <stdexcept>             // for std::domain_error
 #include <string>                // for std::string implicit constructor
-#include <boost/operators.hpp>   // for boost::addable etc
 #include <cstdlib>               // for std::abs
 #include <boost/call_traits.hpp> // for boost::call_traits
 #include <boost/detail/workaround.hpp> // for BOOST_WORKAROUND
@@ -88,6 +88,7 @@
 #include <boost/type_traits/is_class.hpp>
 #include <boost/type_traits/is_same.hpp>
 #include <boost/type_traits/is_array.hpp>
+#include <boost/detail/no_exceptions_support.hpp>

 // Control whether depreciated GCD and LCM functions are included (default: yes)
 #ifndef BOOST_CONTROL_RATIONAL_HAS_GCD
@@ -709,7 +710,7 @@ inline typename boost::enable_if_c <
    rational_detail::is_compatible_integer<Arg, IntType>::value || is_same<rational<IntType>, Arg>::value, bool>::type
    operator <= (const rational<IntType>& a, const Arg& b)
 {
-      return !(a > b);
+      return !a.operator>(b);
 }
 template <class Arg, class IntType>
 BOOST_CXX14_CONSTEXPR
@@ -726,7 +727,7 @@ inline typename boost::enable_if_c <
    rational_detail::is_compatible_integer<Arg, IntType>::value || is_same<rational<IntType>, Arg>::value, bool>::type
    operator >= (const rational<IntType>& a, const Arg& b)
 {
-      return !(a < b);
+      return !a.operator<(b);
 }
 template <class Arg, class IntType>
 BOOST_CXX14_CONSTEXPR
@@ -743,7 +744,7 @@ inline typename boost::enable_if_c <
    rational_detail::is_compatible_integer<Arg, IntType>::value || is_same<rational<IntType>, Arg>::value, bool>::type
    operator != (const rational<IntType>& a, const Arg& b)
 {
-      return !(a == b);
+      return !a.operator==(b);
 }
 template <class Arg, class IntType>
 BOOST_CONSTEXPR
@@ -760,7 +761,7 @@ inline typename boost::enable_if_c <
    rational_detail::is_compatible_integer<Arg, IntType>::value, bool>::type
    operator < (const Arg& b, const rational<IntType>& a)
 {
-      return a > b;
+      return a.operator>(b);
 }
 template <class Arg, class IntType>
 BOOST_CXX14_CONSTEXPR
@@ -768,7 +769,7 @@ inline typename boost::enable_if_c <
    rational_detail::is_compatible_integer<Arg, IntType>::value, bool>::type
    operator > (const Arg& b, const rational<IntType>& a)
 {
-      return a < b;
+      return a.operator<(b);
 }
 template <class Arg, class IntType>
 BOOST_CONSTEXPR
@@ -776,7 +777,7 @@ inline typename boost::enable_if_c <
    rational_detail::is_compatible_integer<Arg, IntType>::value, bool>::type
    operator == (const Arg& b, const rational<IntType>& a)
 {
-      return a == b;
+      return a.operator==(b);
 }

 // Comparison operators
@@ -1046,3 +1047,4 @@ struct lcm_evaluator< rational<IntType> >
 } // namespace boost

 #endif  // BOOST_RATIONAL_HPP
+
diff --git a/Util/BoostFiles/read.hpp b/Util/BoostFiles/read.hpp
index 2f3540dc3..8efd37699 100644
--- a/Util/BoostFiles/read.hpp
+++ b/Util/BoostFiles/read.hpp
@@ -5,8 +5,8 @@
 // Copyright (c) 2009-2012 Mateusz Loskot, London, UK.
 // Copyright (c) 2017 Adam Wulkiewicz, Lodz, Poland.

-// This file was modified by Oracle on 2014, 2015, 2018.
-// Modifications copyright (c) 2014-2018 Oracle and/or its affiliates.
+// This file was modified by Oracle on 2014-2020.
+// Modifications copyright (c) 2014-2020 Oracle and/or its affiliates.

 // Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

@@ -27,14 +27,11 @@
 #include <boost/tokenizer.hpp>

 #include <boost/algorithm/string.hpp>
-#include <boost/mpl/if.hpp>
 #include <boost/range/begin.hpp>
 #include <boost/range/end.hpp>
 #include <boost/range/size.hpp>
 #include <boost/range/value_type.hpp>
 #include <boost/throw_exception.hpp>
-#include <boost/type_traits/is_same.hpp>
-#include <boost/type_traits/remove_reference.hpp>

 #include <boost/geometry/algorithms/assign.hpp>
 #include <boost/geometry/algorithms/append.hpp>
@@ -49,15 +46,17 @@
 #include <boost/geometry/core/interior_rings.hpp>
 #include <boost/geometry/core/mutable_range.hpp>
 #include <boost/geometry/core/point_type.hpp>
-#include <boost/geometry/core/tag_cast.hpp>
+#include <boost/geometry/core/tag.hpp>
 #include <boost/geometry/core/tags.hpp>

 #include <boost/geometry/geometries/concepts/check.hpp>

-#include <boost/geometry/util/coordinate_cast.hpp>
-
 #include <boost/geometry/io/wkt/detail/prefix.hpp>

+#include <boost/geometry/util/coordinate_cast.hpp>
+#include <boost/geometry/util/type_traits.hpp>
+#include <boost/detail/no_exceptions_support.hpp>
+
 namespace boost { namespace geometry
 {

@@ -269,14 +268,10 @@ struct stateful_range_appender<Geometry, open>
     typedef typename geometry::point_type<Geometry>::type point_type;
     typedef typename boost::range_size
         <
-            typename util::bare_type<Geometry>::type
+            typename util::remove_cptrref<Geometry>::type
         >::type size_type;

-    BOOST_STATIC_ASSERT(( boost::is_same
-                            <
-                                typename tag<Geometry>::type,
-                                ring_tag
-                            >::value ));
+    BOOST_STATIC_ASSERT(( util::is_ring<Geometry>::value ));

     inline stateful_range_appender()
         : pt_index(0)
@@ -444,7 +439,7 @@ struct polygon_parser
                 appender::apply(it, end, wkt, ring);
                 traits::push_back
                     <
-                        typename boost::remove_reference
+                        typename std::remove_reference
                         <
                             typename traits::interior_mutable_type<Polygon>::type
                         >::type
--
2.34.1
